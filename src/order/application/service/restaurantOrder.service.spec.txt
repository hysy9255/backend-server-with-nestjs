import { Test, TestingModule } from '@nestjs/testing';
import { DriverOrderService } from './driverOrder.service';
import { RestaurantOrderService } from './restaurantOrder.service';
import { User } from 'src/user/domain/user.entity';
import { UserRole } from 'src/constants/userRole';
import { Restaurant } from 'src/restaurant/domain/restaurant.entity';
import { Order } from '../orm-entities/order.entity';
import { OrderStatus } from 'src/constants/orderStatus';

const mockOrderRepository = {
  findByRestaurant: jest.fn(),
  save: jest.fn(),
  findOneById: jest.fn(),
};

describe('RestaurantOrderService', () => {
  let module: TestingModule;
  let restaurantOrderService: RestaurantOrderService;

  beforeAll(async () => {
    module = await Test.createTestingModule({
      providers: [
        RestaurantOrderService,
        {
          provide: 'OrderRepository',
          useValue: mockOrderRepository,
        },
      ],
    }).compile();

    restaurantOrderService = module.get<RestaurantOrderService>(
      RestaurantOrderService,
    );
  });

  let owner: User;
  let restaurant: Restaurant;
  let customer: User;
  let order: Order;
  let anotherOrder: Order;
  let orders: Order[];

  beforeEach(async () => {
    owner = new User('owner@test.com', 'password', UserRole.Owner);
    restaurant = new Restaurant('mockRestaurant', 'address', 'cafe');
    owner.restaurant = restaurant;
    customer = new User('customer@test.com', 'password', UserRole.Client);
    order = new Order(customer, restaurant);
    anotherOrder = new Order(customer, restaurant);
    orders = [order, anotherOrder];
  });

  afterEach(() => {
    jest.clearAllMocks();
  });

  describe('getOrdersByRestaurant', () => {
    it('should return orders for a restaurant', async () => {
      // given
      mockOrderRepository.findByRestaurant.mockResolvedValue(orders);

      // when
      const result = await restaurantOrderService.getOrdersByRestaurant(
        restaurant.id,
        owner,
      );

      // then
      expect(result).toEqual(orders);
      expect(mockOrderRepository.findByRestaurant).toHaveBeenCalledWith(
        restaurant.id,
      );
    });

    it('should throw an error if the user is not the owner of the restaurant', async () => {
      // given
      mockOrderRepository.findByRestaurant.mockResolvedValue(orders);

      // when + then
      await expect(
        restaurantOrderService.getOrdersByRestaurant(
          'different-restaurant-id',
          owner,
        ),
      ).rejects.toThrow('You can only view orders for restaurants you own');
    });
  });

  describe('getOrder', () => {
    it('should return an order by ID', async () => {
      // given
      mockOrderRepository.findOneById.mockResolvedValue(order);

      // when
      const result = await restaurantOrderService.getOrder(order.id, owner);

      // then
      expect(result).toEqual(order);
      expect(mockOrderRepository.findOneById).toHaveBeenCalledWith(order.id);
    });

    it('should throw an error if the user is not the owner of the restaurant', async () => {
      // given
      const notMyRestaurant = new Restaurant(
        'notMyRestaurant',
        'address',
        'cafe',
      );
      const notMyOrder = new Order(customer, notMyRestaurant);

      mockOrderRepository.findOneById.mockResolvedValue(notMyOrder);

      // when + then
      await expect(
        restaurantOrderService.getOrder(notMyOrder.id, owner),
      ).rejects.toThrow('You do not own the restaurant for this order');
    });
  });

  describe('acceptOrder', () => {
    it('should accept an order', async () => {
      // given
      mockOrderRepository.findOneById.mockResolvedValue(order);
      mockOrderRepository.save.mockResolvedValue(order);

      // when
      const result = await restaurantOrderService.acceptOrder(order.id, owner);

      // then
      // expect(order.markAccepted).toHaveBeenCalled();
      expect(mockOrderRepository.save).toHaveBeenCalledWith(order);
      expect(result).toEqual(order);
    });
  });

  describe('rejectOrder', () => {
    it('should reject an order', async () => {
      // given
      // const owner = new User('user-123', 'password', UserRole.Owner);
      // const restaurant = new Restaurant(
      //   'Test Restaurant',
      //   '123 Test St',
      //   'cuisine',
      // );
      // owner.restaurant = restaurant;
      const orderId = 'order-123';
      const order = {
        id: orderId,
        status: OrderStatus.Pending,
        markRejected: jest.fn(),
        restaurant,
      };
      mockOrderRepository.findOneById.mockResolvedValue(order);
      mockOrderRepository.save.mockResolvedValue(order);

      // when
      const result = await restaurantOrderService.rejectOrder(orderId, owner);

      // then
      expect(order.markRejected).toHaveBeenCalled();
      expect(mockOrderRepository.save).toHaveBeenCalledWith(order);
      expect(result).toEqual(order);
    });
  });

  //   describe('markOrderAsReady', () => {
  //     it('should mark an order as ready', async () => {
  //       // given
  //       const owner = new User('user-123', 'password', UserRole.Owner);
  //       const restaurant = new Restaurant(
  //         'Test Restaurant',
  //         '123 Test St',
  //         'cuisine',
  //       );
  //       owner.restaurant = restaurant;
  //       const orderId = 'order-123';
  //       const order = {
  //         id: orderId,
  //         status: 'pending',
  //         markReady: jest.fn(),
  //         restaurant,
  //       };

  //       mockOrderRepository.findOneById.mockResolvedValue(order);
  //       mockOrderRepository.save.mockResolvedValue(order);

  //       // when
  //       const result = await restaurantOrderService.markOrderAsReady(
  //         orderId,
  //         owner,
  //       );

  //       // then
  //       expect(order.markReady).toHaveBeenCalled();
  //       expect(mockOrderRepository.save).toHaveBeenCalledWith(order);
  //       expect(result).toEqual(order);
  //     });
  //   });

  //   describe('getOrderOrThrow', () => {
  //     it('should throw an error if order is not found', async () => {
  //       // given
  //       const orderId = 'non-existent-order';
  //       mockOrderRepository.findOneById.mockResolvedValue(null);

  //       // when & then
  //       await expect(
  //         restaurantOrderService['getOrderOrThrow'](orderId),
  //       ).rejects.toThrow('Order not found');
  //     });
  //   });
});
